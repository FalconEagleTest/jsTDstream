name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      description:
        description: 'Release description'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - target: arm64
            os: android64
            arch: arm64
            node_arch: arm64
          - target: arm
            os: android32
            arch: armv7l
            node_arch: arm

    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Download Node.js binary
      run: |
        mkdir -p dist
        
        # Download the pre-built binary
        NODE_VERSION="v16.20.2"
        ARCH="${{ matrix.node_arch }}"
        
        wget -q https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-${ARCH}.tar.gz
        tar -xzf node-${NODE_VERSION}-linux-${ARCH}.tar.gz
        mv node-${NODE_VERSION}-linux-${ARCH}/bin/node dist/telegram-file-server-${{ matrix.os }}
        chmod +x dist/telegram-file-server-${{ matrix.os }}

    - name: Install dependencies
      run: |
        npm ci

    - name: Package application
      run: |
        # Create a temporary directory for packaging
        mkdir -p build/app
        
        # Copy application files
        cp -r src/* build/app/
        cp -r node_modules build/app/
        cp package.json build/app/
        
        # Create startup script
        cat > build/app/start.sh << 'EOL'
        #!/bin/sh
        DIR=$(dirname "$0")
        export NODE_PATH=$DIR/node_modules
        exec $DIR/../telegram-file-server-${{ matrix.os }} $DIR/index.js "$@"
        EOL
        
        chmod +x build/app/start.sh
        
        # Archive everything
        cd build
        tar -czf ../dist/telegram-file-server-${{ matrix.os }}.tar.gz app/* telegram-file-server-${{ matrix.os }}
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: success()
      with:
        files: dist/telegram-file-server-${{ matrix.os }}*
        tag_name: v${{ inputs.version }}-${{ matrix.os }}-${{ steps.date.outputs.date }}
        name: Telegram File Server ${{ matrix.os }} v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: ${{ matrix.os }}
          Architecture: ${{ matrix.arch }}
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          - This build is packaged for Linux ${{ matrix.arch }}
          - For use on Android with root access
          - Includes pre-built Node.js binary
          
          ### Installation
          1. Extract the tar.gz file
          2. Run the start.sh script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: telegram-file-server-${{ matrix.os }}
        path: dist/telegram-file-server-${{ matrix.os }}*
        compression-level: 0
