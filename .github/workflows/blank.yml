name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      platforms:
        description: 'Platforms to build'
        required: true
        type: choice
        options:
          - all
          - windows64
          - android64
          - android32
      description:
        description: 'Release description'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: win64
            os: windows64
            pkg_target: node16-win-x64
            if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'windows64' }}
          - target: arm64
            os: android64
            pkg_target: node16-linux-arm64
            if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'android64' }}
          - target: arm
            os: android32
            pkg_target: node16-linux-armv7
            if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'android32' }}

    if: ${{ fromJson(matrix.if) }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Install MinGW for Windows build
      if: matrix.target == 'win64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 g++-mingw-w64

    - name: Prepare build directory
      run: mkdir -p build

    - name: Build Binary (Windows)
      if: matrix.target == 'win64'
      run: |
        npx pkg . \
          --target ${{ matrix.pkg_target }} \
          --output build/telegram-file-server-${{ matrix.os }}.exe \
          --public \
          --no-bytecode
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++

    - name: Build Binary (ARM64)
      if: matrix.target == 'arm64'
      run: |
        npx pkg . \
          --target ${{ matrix.pkg_target }} \
          --output build/telegram-file-server-${{ matrix.os }} \
          --public \
          --no-bytecode

    - name: Build Binary (ARM32)
      if: matrix.target == 'arm'
      run: |
        NODE_VERSION="v16.20.2"
        
        # Download ARM32 binary
        wget -q https://unofficial-builds.nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz || \
        wget -q https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        tar -xzf node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        # Create directory structure
        cp -r src build/
        cp -r node_modules build/
        cp package.json build/
        
        # Copy Node.js binary
        cp node-${NODE_VERSION}-linux-armv7l/bin/node build/telegram-file-server-${{ matrix.os }}
        chmod +x build/telegram-file-server-${{ matrix.os }}
        
        # Create startup script
        cat > build/start.sh << 'EOL'
        #!/bin/sh
        DIR=$(dirname "$0")
        export NODE_PATH=$DIR/node_modules
        exec $DIR/telegram-file-server-${{ matrix.os }} $DIR/src/index.js "$@"
        EOL
        
        chmod +x build/start.sh
        
        # Create archive
        cd build
        tar -czf telegram-file-server-${{ matrix.os }}.tar.gz *
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: success()
      with:
        files: build/telegram-file-server-${{ matrix.os }}*
        tag_name: v${{ inputs.version }}-${{ matrix.os }}-${{ steps.date.outputs.date }}
        name: Telegram File Server ${{ matrix.os }} v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: ${{ matrix.os }}
          Architecture: ${{ matrix.target }}
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          ${{ matrix.target == 'win64' && '- Windows 64-bit executable' || matrix.target == 'arm64' && '- Linux ARM64 binary for Android use' || '- Linux ARM32 binary for Android use' }}
          ${{ matrix.target != 'win64' && '- Requires root access on Android' || '' }}
          
          ### Installation (ARM32)
          ${{ matrix.target == 'arm' && '1. Extract the tar.gz file\n2. Run ./start.sh' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: telegram-file-server-${{ matrix.os }}
        path: build/telegram-file-server-${{ matrix.os }}*
        compression-level: 0
