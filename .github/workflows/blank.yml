name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      windows64:
        description: 'Build Windows 64-bit'
        type: boolean
        default: false
      android64:
        description: 'Build Android ARM64'
        type: boolean
        default: false
      android32:
        description: 'Build Android ARM32'
        type: boolean
        default: false
      description:
        description: 'Release description'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  windows:
    if: ${{ github.event.inputs.windows64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Install MinGW
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 g++-mingw-w64

    - name: Build Binary
      run: |
        mkdir -p build
        npx pkg . \
          --target node16-win-x64 \
          --output build/telegram-file-server-windows64.exe \
          --public \
          --no-bytecode
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/telegram-file-server-windows64.exe
        tag_name: v${{ inputs.version }}-windows64-${{ steps.date.outputs.date }}
        name: Telegram File Server Windows64 v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: Windows 64-bit
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          - Windows 64-bit executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  android-arm64:
    if: ${{ github.event.inputs.android64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Build Binary
      run: |
        mkdir -p build
        npx pkg . \
          --target node16-linux-arm64 \
          --output build/telegram-file-server-android64 \
          --public \
          --no-bytecode

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/telegram-file-server-android64
        tag_name: v${{ inputs.version }}-android64-${{ steps.date.outputs.date }}
        name: Telegram File Server Android64 v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: Android ARM64
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          - Linux ARM64 binary for Android use
          - Requires root access
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  android-arm32:
    if: ${{ github.event.inputs.android32 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Build Binary
      run: |
        NODE_VERSION="v16.20.2"
        mkdir -p build
        
        # Download ARM32 binary
        wget -q https://unofficial-builds.nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz || \
        wget -q https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        tar -xzf node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        # Create directory structure
        cp -r src build/
        cp -r node_modules build/
        cp package.json build/
        
        # Copy Node.js binary
        cp node-${NODE_VERSION}-linux-armv7l/bin/node build/telegram-file-server-android32
        chmod +x build/telegram-file-server-android32
        
        # Create startup script
        cat > build/start.sh << 'EOL'
        #!/bin/sh
        DIR=$(dirname "$0")
        export NODE_PATH=$DIR/node_modules
        exec $DIR/telegram-file-server-android32 $DIR/src/index.js "$@"
        EOL
        
        chmod +x build/start.sh
        
        # Create archive
        cd build
        tar -czf telegram-file-server-android32.tar.gz *
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/telegram-file-server-android32
          build/telegram-file-server-android32.tar.gz
        tag_name: v${{ inputs.version }}-android32-${{ steps.date.outputs.date }}
        name: Telegram File Server Android32 v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: Android ARM32
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          - Linux ARM32 binary for Android use
          - Requires root access
          
          ### Installation
          1. Extract the tar.gz file
          2. Run ./start.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
