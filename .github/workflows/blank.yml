name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      windows64:
        description: 'Build Windows 64-bit'
        type: boolean
        default: false
      android64:
        description: 'Build Android ARM64'
        type: boolean
        default: false
      android32:
        description: 'Build Android ARM32'
        type: boolean
        default: false
      compression:
        description: 'Compression level'
        type: choice
        options:
          - none
          - normal
          - max
        default: 'normal'
      target_system:
        description: 'Target system performance'
        type: choice
        options:
          - low_end
          - normal
          - high_end
        default: 'normal'
      description:
        description: 'Release description'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  windows:
    if: ${{ github.event.inputs.windows64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Install MinGW
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 g++-mingw-w64

    - name: Build Windows 64-bit Binary
      run: |
        mkdir -p build/assets
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        
        COMPRESS_FLAG=""
        if [ "$COMPRESS_LEVEL" != "none" ]; then
          COMPRESS_FLAG="--compress"
        fi
        
        npx pkg . \
          --target node16-win-x64 \
          --output build/assets/telegram-file-server-windows64.exe \
          --public \
          --no-bytecode \
          $COMPRESS_FLAG \
          --no-native-build
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-assets
        path: build/assets/*
        retention-days: 1

  android-arm64:
    if: ${{ github.event.inputs.android64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Build Android ARM64 Binary
      run: |
        mkdir -p build/assets
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        
        COMPRESS_FLAG=""
        if [ "$COMPRESS_LEVEL" != "none" ]; then
          COMPRESS_FLAG="--compress"
        fi
        
        npx pkg . \
          --target node16-linux-arm64 \
          --output build/assets/telegram-file-server-android64 \
          --public \
          --no-bytecode \
          $COMPRESS_FLAG \
          --no-native-build

    - name: Upload Android ARM64 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android64-assets
        path: build/assets/*
        retention-days: 1

  android-arm32:
    if: ${{ github.event.inputs.android32 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Build Android ARM32 Binary
      run: |
        NODE_VERSION="v16.20.2"
        mkdir -p build/assets
        
        # Download ARM32 binary
        wget -q https://unofficial-builds.nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz || \
        wget -q https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        tar -xzf node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        # Determine which files to include based on target system
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        
        mkdir -p package
        
        case $SYSTEM_TYPE in
          "low_end")
            # Minimal files for low-end systems
            mkdir -p package/src package/node_modules
            cp -r src/index.js package/src/
            cp -r node_modules/{telegram,express,body-parser} package/node_modules/
            ;;
          "normal")
            # Normal set of files
            cp -r src package/
            cp -r node_modules package/
            rm -rf package/node_modules/**/test
            rm -rf package/node_modules/**/docs
            ;;
          "high_end")
            # Full set of files
            cp -r src package/
            cp -r node_modules package/
            ;;
        esac
        
        cp package.json package/
        
        # Copy Node.js binary
        cp node-${NODE_VERSION}-linux-armv7l/bin/node package/telegram-file-server-android32
        chmod +x package/telegram-file-server-android32
        
        # Create startup script
        cat > package/start.sh << 'EOL'
        #!/bin/sh
        DIR=$(dirname "$0")
        export NODE_PATH=$DIR/node_modules
        exec $DIR/telegram-file-server-android32 $DIR/src/index.js "$@"
        EOL
        
        chmod +x package/start.sh
        
        # Create archive with optional compression
        cd package
        case $COMPRESS_LEVEL in
          "none")
            tar -cf ../build/assets/telegram-file-server-android32.tar *
            ;;
          "normal")
            tar -czf ../build/assets/telegram-file-server-android32.tar.gz *
            ;;
          "max")
            tar -cJf ../build/assets/telegram-file-server-android32.tar.xz *
            ;;
        esac
        cd ..
        
        # Move binary out for separate upload
        mv package/telegram-file-server-android32 build/assets/

    - name: Upload Android ARM32 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android32-assets
        path: build/assets/*
        retention-days: 1

  release:
    needs: [windows, android-arm64, android-arm32]
    runs-on: ubuntu-latest
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: build/assets
        merge-multiple: true

    - name: Create Unified Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/assets/*
        tag_name: v${{ inputs.version }}-${{ steps.date.outputs.date }}
        name: Telegram File Server v${{ inputs.version }}
        body: |
          ## Telegram File Server v${{ inputs.version }}
          Build Date: ${{ steps.date.outputs.date }}
          Compression: ${{ inputs.compression }}
          System Target: ${{ inputs.target_system }}
          
          ${{ inputs.description }}
          
          ### Platforms
          
          #### Windows 64-bit
          - Binary: telegram-file-server-windows64.exe
          - Requires Windows 64-bit
          - Optimized for ${{ inputs.target_system }} systems
          
          #### Android ARM64
          - Binary: telegram-file-server-android64
          - Requires Android with ARM64 support
          - Requires root access
          - Optimized for ${{ inputs.target_system }} systems
          
          #### Android ARM32
          - Binary: telegram-file-server-android32
          - Archive: telegram-file-server-android32.tar* (choose based on compression)
          - Requires Android with ARM32 support
          - Requires root access
          - Optimized for ${{ inputs.target_system }} systems
          
          ### Installation
          - Download the appropriate binary for your platform
          - For Android ARM32, extract the archive and run ./start.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
