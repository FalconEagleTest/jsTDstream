name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      description:
        description: 'Release description'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - target: win-x64
            os: windows64
            pkg_target: node16-win-x64
          - target: android-arm64
            os: android64
            pkg_target: node16-android-arm64
          - target: android-arm
            os: android32
            pkg_target: node16-android-arm

    steps:
    - uses: actions/checkout@v4
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          python3 \
          mingw-w64

    - name: Setup project
      run: |
        # Install nan explicitly first
        npm install nan
        
        # Install remaining dependencies
        npm install
        
        # Install pkg
        npm install --save-dev pkg

    - name: Update package.json
      run: |
        node -e "
          const fs = require('fs');
          const pkg = require('./package.json');
          
          // Add pkg configuration
          pkg.bin = 'src/index.js';
          pkg.pkg = {
            assets: [
              'src/**/*',
              'config/**/*',
              'node_modules/**/*'
            ],
            targets: [ '${{ matrix.pkg_target }}' ]
          };
          
          // Ensure nan is in dependencies
          if (!pkg.dependencies) pkg.dependencies = {};
          if (!pkg.dependencies.nan) pkg.dependencies.nan = '^2.18.0';
          
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "

    - name: Build Binary
      run: |
        npx pkg . \
          --target ${{ matrix.pkg_target }} \
          --output telegram-file-server-${{ matrix.os }} \
          --public \
          --compress GZip
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: telegram-file-server-${{ matrix.os }}*
        tag_name: v${{ inputs.version }}-${{ matrix.os }}-${{ steps.date.outputs.date }}
        name: Telegram File Server ${{ matrix.os }} v${{ inputs.version }}
        body: |
          Version: ${{ inputs.version }}
          Platform: ${{ matrix.os }}
          Build Date: ${{ steps.date.outputs.date }}
          
          ${{ inputs.description }}
          
          ### Notes
          - Windows 64-bit build includes GUI support
          - Android builds require root access
          - All builds include required Telegram dependencies
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: telegram-file-server-${{ matrix.os }}
        path: telegram-file-server-${{ matrix.os }}*
        compression-level: 0
