name: Build Portable Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (optional)'
        required: false
        type: string
      windows64:
        description: 'Build Windows 64-bit'
        type: boolean
        default: false
      android64:
        description: 'Build Android ARM64'
        type: boolean
        default: false
      android32:
        description: 'Build Android ARM32'
        type: boolean
        default: false
      compression:
        description: 'Compression level'
        type: choice
        options:
          - none
          - normal
          - max
        default: 'normal'
      target_system:
        description: 'Target system performance'
        type: choice
        options:
          - low_end
          - normal
          - high_end
        default: 'normal'
      description:
        description: 'Release description'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set-info.outputs.release_tag }}
      release_name: ${{ steps.set-info.outputs.release_name }}
    steps:
      - name: Set release info
        id: set-info
        run: |
          VERSION="${{ inputs.version || format('0.1.{0}', github.run_number) }}"
          echo "release_tag=v${VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${VERSION}" >> $GITHUB_OUTPUT

  windows:
    needs: prepare-release
    if: ${{ github.event.inputs.windows64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Install MinGW
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 g++-mingw-w64

    - name: Update package.json
      run: |
        # Set compression and memory options based on inputs
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        
        # Define memory limits based on target system
        case $SYSTEM_TYPE in
          "low_end")
            MEM_LIMIT="512"
            ASSETS_LEVEL="minimal"
            ;;
          "normal")
            MEM_LIMIT="1024"
            ASSETS_LEVEL="normal"
            ;;
          "high_end")
            MEM_LIMIT="2048"
            ASSETS_LEVEL="full"
            ;;
        esac
        
        # Define compression based on input
        case $COMPRESS_LEVEL in
          "none")
            COMPRESS_OPT=""
            ;;
          "normal")
            COMPRESS_OPT="GZip"
            ;;
          "max")
            COMPRESS_OPT="Brotli"
            ;;
        esac
        
        node -e "
          const fs = require('fs');
          const pkg = require('./package.json');
          
          // Set basic configuration
          pkg.bin = 'src/index.js';
          
          // Define assets based on system type
          const assetConfigs = {
            minimal: {
              assets: ['src/**/*', 'config/**/*'],
              scripts: [
                'node_modules/telegram/**/*.js',
                'node_modules/express/**/*.js',
                'node_modules/body-parser/**/*.js'
              ]
            },
            normal: {
              assets: ['src/**/*', 'config/**/*', 'node_modules/**/*.js'],
              scripts: []
            },
            full: {
              assets: ['src/**/*', 'config/**/*', 'node_modules/**/*'],
              scripts: []
            }
          };
          
          pkg.pkg = {
            ...assetConfigs['${ASSETS_LEVEL}'],
            targets: ['node16-win-x64'],
            compress: '${COMPRESS_OPT}',
            options: {
              'max-old-space-size': ${MEM_LIMIT}
            },
            ignore: [
              ...(('${ASSETS_LEVEL}' !== 'full') ? [
                'node_modules/**/*.md',
                'node_modules/**/*.txt',
                'node_modules/**/test/**',
                'node_modules/**/docs/**',
                'node_modules/**/*.d.ts',
                'node_modules/**/LICENSE*',
                'node_modules/**/example/**'
              ] : [])
            ]
          };
          
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "

    - name: Build Binary
      run: |
        mkdir -p build/assets
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        
        COMPRESS_FLAG=""
        if [ "$COMPRESS_LEVEL" != "none" ]; then
          COMPRESS_FLAG="--compress"
        fi
        
        npx pkg . \
          --target node16-win-x64 \
          --output build/assets/telegram-file-server-windows64.exe \
          --public \
          --no-bytecode \
          $COMPRESS_FLAG \
          --no-native-build
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++

    - name: Release Windows
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/assets/*"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ needs.prepare-release.outputs.release_tag }}
        name: ${{ needs.prepare-release.outputs.release_name }}
        body: |
          ## Windows 64-bit Binary
          Compression: ${{ inputs.compression }}
          System Target: ${{ inputs.target_system }}
          
          ${{ inputs.description }}

  android-arm64:
    needs: prepare-release
    if: ${{ github.event.inputs.android64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Update package.json
      run: |
        # Set compression and memory options based on inputs
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        
        # Define memory limits based on target system
        case $SYSTEM_TYPE in
          "low_end")
            MEM_LIMIT="512"
            ASSETS_LEVEL="minimal"
            ;;
          "normal")
            MEM_LIMIT="1024"
            ASSETS_LEVEL="normal"
            ;;
          "high_end")
            MEM_LIMIT="2048"
            ASSETS_LEVEL="full"
            ;;
        esac
        
        # Define compression based on input
        case $COMPRESS_LEVEL in
          "none")
            COMPRESS_OPT=""
            ;;
          "normal")
            COMPRESS_OPT="GZip"
            ;;
          "max")
            COMPRESS_OPT="Brotli"
            ;;
        esac
        
        node -e "
          const fs = require('fs');
          const pkg = require('./package.json');
          
          pkg.bin = 'src/index.js';
          
          const assetConfigs = {
            minimal: {
              assets: ['src/**/*', 'config/**/*'],
              scripts: [
                'node_modules/telegram/**/*.js',
                'node_modules/express/**/*.js',
                'node_modules/body-parser/**/*.js'
              ]
            },
            normal: {
              assets: ['src/**/*', 'config/**/*', 'node_modules/**/*.js'],
              scripts: []
            },
            full: {
              assets: ['src/**/*', 'config/**/*', 'node_modules/**/*'],
              scripts: []
            }
          };
          
          pkg.pkg = {
            ...assetConfigs['${ASSETS_LEVEL}'],
            targets: ['node16-linux-arm64'],
            compress: '${COMPRESS_OPT}',
            options: {
              'max-old-space-size': ${MEM_LIMIT}
            },
            ignore: [
              ...(('${ASSETS_LEVEL}' !== 'full') ? [
                'node_modules/**/*.md',
                'node_modules/**/*.txt',
                'node_modules/**/test/**',
                'node_modules/**/docs/**',
                'node_modules/**/*.d.ts',
                'node_modules/**/LICENSE*',
                'node_modules/**/example/**'
              ] : [])
            ]
          };
          
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "

    - name: Build Binary
      run: |
        mkdir -p build/assets
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        
        COMPRESS_FLAG=""
        if [ "$COMPRESS_LEVEL" != "none" ]; then
          COMPRESS_FLAG="--compress"
        fi
        
        npx pkg . \
          --target node16-linux-arm64 \
          --output build/assets/telegram-file-server-android64 \
          --public \
          --no-bytecode \
          $COMPRESS_FLAG \
          --no-native-build

    - name: Release Android ARM64
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/assets/*"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ needs.prepare-release.outputs.release_tag }}
        name: ${{ needs.prepare-release.outputs.release_name }}
        body: |
          ## Android ARM64 Binary
          Compression: ${{ inputs.compression }}
          System Target: ${{ inputs.target_system }}
          
          ${{ inputs.description }}

  android-arm32:
    needs: prepare-release
    if: ${{ github.event.inputs.android32 == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts
        npm install --save-dev pkg

    - name: Build Binary
      run: |
        NODE_VERSION="v16.20.2"
        mkdir -p build/assets
        
        # Download ARM32 binary
        wget -q https://unofficial-builds.nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz || \
        wget -q https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        tar -xzf node-${NODE_VERSION}-linux-armv7l.tar.gz
        
        # Determine which files to include based on target system
        SYSTEM_TYPE="${{ github.event.inputs.target_system }}"
        COMPRESS_LEVEL="${{ github.event.inputs.compression }}"
        
        mkdir -p package
        
        case $SYSTEM_TYPE in
          "low_end")
            # Minimal files for low-end systems
            mkdir -p package/src package/node_modules
            cp -r src/index.js package/src/
            cp -r node_modules/{telegram,express,body-parser} package/node_modules/
            ;;
          "normal")
            # Normal set of files
            cp -r src package/
            cp -r node_modules package/
            rm -rf package/node_modules/**/test
            rm -rf package/node_modules/**/docs
            ;;
          "high_end")
            # Full set of files
            cp -r src package/
            cp -r node_modules package/
            ;;
        esac
        
        cp package.json package/
        
        # Copy Node.js binary
        cp node-${NODE_VERSION}-linux-armv7l/bin/node package/telegram-file-server-android32
        chmod +x package/telegram-file-server-android32
        
        # Create startup script
        cat > package/start.sh << 'EOL'
        #!/bin/sh
        DIR=$(dirname "$0")
        export NODE_PATH=$DIR/node_modules
        exec $DIR/telegram-file-server-android32 $DIR/src/index.js "$@"
        EOL
        
        chmod +x package/start.sh
        
        # Create archive with optional compression
        cd package
        case $COMPRESS_LEVEL in
          "none")
            tar -cf ../build/assets/telegram-file-server-android32.tar *
            ;;
          "normal")
            tar -czf ../build/assets/telegram-file-server-android32.tar.gz *
            ;;
          "max")
            tar -cJf ../build/assets/telegram-file-server-android32.tar.xz *
            ;;
        esac
        cd ..
        
        # Move binary out for separate upload
        mv package/telegram-file-server-android32 build/assets/

    - name: Release Android ARM32
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/assets/*"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ needs.prepare-release.outputs.release_tag }}
        name: ${{ needs.prepare-release.outputs.release_name }}
        body: |
          ## Android ARM32 Binary
          Compression: ${{ inputs.compression }}
          System Target: ${{ inputs.target_system }}
          
          ${{ inputs.description }}
